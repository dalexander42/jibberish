package app;

public class SinglyLinkedList 
{

class Node
{

		public int data;
		public Node next;
		public Node(int data) 
		{
			this.data = data;
			this.next = null;
		}	
	}
	
	Node head = null, reversedList = null, tail = null;
	
	public void insert(int data)
	{
		Node newNode = new Node(data);
		if(head == null)
		{
			this.head = newNode;
			this.tail = newNode;
		}
		
		else
		{
			this.tail.next = newNode;
			this.tail = newNode;
		}
	}
	
	public int front()
	{
		return this.head.data;
	}
	
	public int back()
	{
		return this.tail.data;
	}
	
	boolean isEmpty()
	{
		if(head == null)
			return true;
		else
			return false;
	}
	
	public void pop_front()
	{
		if(isEmpty())
		{
			System.out.println("Empty List");
		}
		
		else
		{
			this.head = this.head.next;
		}
	}
	
	//checks if empty without front or back values, then proceeds to find the remaining values
	public void pop_back()
	{
		if(isEmpty())
		{
			System.out.println("Empty List");
		}
		else
		{
			Node temp = this.head;
			while(temp.next.next != null)
			{
				temp = temp.next;
			}
			
			this.tail = temp;
			temp.next = null;
		}
	}
	
	public int size()
	{
		int count = 1;
		Node temp = this.head;
		while(temp.next != null)
		{
			count += 1;
			temp = temp.next;
		}
		return count;
	}
	
	public void reverse(Node temp)
	{
		if(temp == null)
		{
			return;
		}
		
		reverse(temp.next);
		System.out.print(" " + temp.data);
	}
	
	public void merge(SinglyLinkedList aList)
	{
		this.tail.next = aList.head;
		this.tail = aList.head;
	}
}



-------------------------------------------------------------------------------------------------


package app;

public class ImplementList 
{
	public static void main(String[] args)
	{
		//insert list values
		SinglyLinkedList myList = new SinglyLinkedList();
		myList.insert(42);
		myList.insert(54);
		myList.insert(25);
		myList.insert(45);
		myList.insert(22);
		
		System.out.print("Reversed List: ");
		myList.reversedList = myList.head;
		myList.reverse(myList.reversedList);
		System.out.println("\nlist size: " + myList.size());
		System.out.println("front: " + myList.front());
		System.out.println("back: " + myList.back());
		
		System.out.print("after pop_front/pop_back: ");
		myList.pop_front();
		myList.pop_back();
		
		myList.reversedList = myList.head;
		myList.reverse(myList.reversedList);
		System.out.print("\n");
		
		//2nd list to merge
		
		SinglyLinkedList myList2 = new SinglyLinkedList();
		myList2.insert(50);
		myList2.insert(100);
		myList2.insert(200);
		
		System.out.print("merged lists: ");
		myList2.merge(myList);
		
		myList2.reversedList = myList2.head;
		myList2.reverse(myList2.head);
		
	}
}
